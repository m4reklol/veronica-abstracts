// backend/src/utils/gpwebpay.js

import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';

// Cesty ke kl칤캜콢m
const privateKeyPath = path.resolve(process.env.GP_PRIVATE_KEY_PATH);
const publicKeyPath = path.resolve(process.env.GP_PUBLIC_KEY_PATH);

// Parametry pro v칳po캜et DIGEST (p콏esn캩 podle po콏ad칤 GP Webpay)
const digestParamOrder = [
  'MERCHANTNUMBER',
  'OPERATION',
  'ORDERNUMBER',
  'AMOUNT',
  'CURRENCY',
  'DEPOSITFLAG',
  'MERORDERNUM',
  'URL'
];

/**
 * Vytvo콏칤 tzv. digestInput podle po콏ad칤 parametru pro podpis
 * @param {Object} params 
 * @returns {string}
 */
function createDigestInput(params) {
  return digestParamOrder.map((key) => params[key] ?? '').join('|');
}

/**
 * Podep칤코e digestInput priv치tn칤m kl칤캜em a vr치t칤 podpis (base64)
 * @param {string} digestInput 
 * @returns {Promise<string>}
 */
async function signDigestInput(digestInput) {
  const privateKeyPem = await fs.readFile(privateKeyPath, 'utf-8');
  const signer = crypto.createSign('SHA1');
  signer.update(digestInput, 'utf8');
  signer.end();
  return signer.sign(privateKeyPem, 'base64');
}

/**
 * Ov캩콏칤 odpov캩캞 od GP Webpay pomoc칤 ve콏ejn칠ho certifik치tu
 * @param {string} digestInput 
 * @param {string} digest 
 * @returns {Promise<boolean>}
 */
export async function verifyDigest(digestInput, digest) {
  const publicKeyPem = await fs.readFile(publicKeyPath, 'utf-8');
  const verifier = crypto.createVerify('SHA1');
  verifier.update(digestInput, 'utf-8');
  verifier.end();
  return verifier.verify(publicKeyPem, digest, 'base64');
}

/**
 * Vytvo콏칤 payload pro p콏esm캩rov치n칤 na GP Webpay v캜etn캩 DIGEST
 * @param {Object} params 
 * @returns {Promise<Object>}
 */
export async function createPaymentPayload(params) {
  const digestInput = createDigestInput(params);
  const digest = await signDigestInput(digestInput);

  // Debug logy pro lad캩n칤 (voliteln캩 zakomentuj v produkci)
  console.log("游댏 digestInput:", digestInput);
  console.log("游늯 digest:", digest);

  return {
    ...params,
    DIGEST: digest
  };
}

/**
 * Vrac칤 URL encoded 콏et캩zec kl칤캜=hodnota, 콏azen칳 abecedn캩
 * @param {Object} params 
 * @returns {string}
 */
export function createQueryString(params) {
  return Object.entries(params)
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([key, val]) => `${key}=${encodeURIComponent(val)}`)
    .join('&');
}

// Export digest input pro ru캜n칤 ov캩콏en칤
export { createDigestInput };
